/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package yarharpictor;

import com.alee.laf.WebLookAndFeel;
import com.alee.laf.progressbar.WebProgressBar;
import java.awt.Color;
import java.awt.Toolkit;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.List;
import java.io.File;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.TimeZone;
import java.util.regex.Pattern;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableRowSorter;
import javax.swing.text.DefaultCaret;
import yarharpictor.tools.FilesTools;
import yarharpictor.tools.SoundTools;
import yarharpictor.tools.StaticStrings;
import yarharpictor.tools.UserSettings;

/**
 *
 * @author jaime
 */
public class YarHarPictor extends javax.swing.JFrame {

        /* UI Components */
    private TableModel          model;
    private final String appTitle = "Yar Har Pictor";
    Yar yar = new Yar(this);
    YarDump yardump = new YarDump(this);
    warning war = null;
    YarPicTerminal ter = null;
    
    File    selected;
    String  port;
    boolean portinit = false;
    //WebProgressBar b = new WebProgressbar();
    
    public static Color DEFBAR_FONT_COLOR     = new Color(64,64,64);
    public static Color DEFBAR_PROG_TOPCOLOR  = new Color(255,255,255);
    
    public String proyect;
    
    /**
     * Creates new form YarHarPictor
     */
    public YarHarPictor() {
        
        setTitle(appTitle);
        this.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/resources/icon.png")));
        
        startAPP();
        initComponents();
        afterAPP();
        
        run();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        t_folder = new javax.swing.JTextField();
        b_folder = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        t_depth = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        t_port = new javax.swing.JComboBox();
        b_ports = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        t_serial = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        sound_check = new javax.swing.JCheckBox();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        s_bitrate = new javax.swing.JTextField();
        s_databits = new javax.swing.JTextField();
        s_stopbit = new javax.swing.JTextField();
        s_paritybit = new javax.swing.JTextField();
        b_reload = new javax.swing.JButton();
        b_start = new javax.swing.JButton();
        b_dis = new javax.swing.JButton();
        progressBar = new WebProgressBar();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        b_hyper = new javax.swing.JButton();
        b_hyper1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Yar Har Pictor");
        setPreferredSize(new java.awt.Dimension(950, 750));

        jLabel1.setFont(new java.awt.Font("Myanmar Text", 1, 24)); // NOI18N
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/text.png"))); // NOI18N

        table.setModel(model);
        table.setSelectionBackground(new java.awt.Color(0, 204, 204));
        jScrollPane1.setViewportView(table);

        jLabel2.setText("MPLAB Folder:");

        t_folder.setEditable(false);
        t_folder.setText("Select a Folder with MPLAB Proyects");

        b_folder.setText("Select");
        b_folder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_folderActionPerformed(evt);
            }
        });

        jLabel3.setText("Search depth");

        t_depth.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9" }));
        t_depth.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                t_depthItemStateChanged(evt);
            }
        });
        t_depth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                t_depthActionPerformed(evt);
            }
        });

        jLabel4.setText("Serial PORT:");

        t_port.setModel(new javax.swing.DefaultComboBoxModel(new String[] { " " }));
        t_port.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                t_portItemStateChanged(evt);
            }
        });
        t_port.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                t_portActionPerformed(evt);
            }
        });

        b_ports.setText("Find Ports");
        b_ports.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                b_portsItemStateChanged(evt);
            }
        });
        b_ports.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_portsActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Serial Output"));

        t_serial.setEditable(false);
        t_serial.setBackground(new java.awt.Color(0, 0, 0));
        t_serial.setColumns(20);
        t_serial.setForeground(new java.awt.Color(0, 255, 0));
        t_serial.setRows(5);
        jScrollPane2.setViewportView(t_serial);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Settings"));
        jPanel3.setToolTipText("");

        sound_check.setText("Enable Sound");
        sound_check.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sound_checkActionPerformed(evt);
            }
        });

        jLabel10.setText("Parity Bit");

        jLabel11.setText("Stop bit");

        jLabel12.setText("Data bits");

        jLabel13.setText("Bits per second");

        s_bitrate.setEditable(false);
        s_bitrate.setText("9600");
        s_bitrate.setToolTipText("Estos ajustes podr√≠an cambiarse editando el archivo de configuracion");
        s_bitrate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                s_bitrateActionPerformed(evt);
            }
        });

        s_databits.setEditable(false);
        s_databits.setText("8");

        s_stopbit.setEditable(false);
        s_stopbit.setText("1");

        s_paritybit.setEditable(false);
        s_paritybit.setText("None");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(sound_check, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(53, 53, 53))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel13)
                            .addComponent(jLabel12)
                            .addComponent(jLabel11)
                            .addComponent(jLabel10))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(s_stopbit)
                            .addComponent(s_databits)
                            .addComponent(s_bitrate)
                            .addComponent(s_paritybit, javax.swing.GroupLayout.DEFAULT_SIZE, 78, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(sound_check)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(s_bitrate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(s_databits, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(s_stopbit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(s_paritybit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        b_reload.setText("Reload Files");
        b_reload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_reloadActionPerformed(evt);
            }
        });

        b_start.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        b_start.setText("YAR HAR FIDDLE TEE DEE");
        b_start.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_startActionPerformed(evt);
            }
        });

        b_dis.setText("Disconnect");
        b_dis.setEnabled(false);
        b_dis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_disActionPerformed(evt);
            }
        });

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/logo.png"))); // NOI18N
        jLabel5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jLabel5MouseReleased(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel6.setText("Flash tool for Pictor EHU");

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel7.setText("by Jaime Hidalgo");

        b_hyper.setText("HyperTerminal Mode");
        b_hyper.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_hyperActionPerformed(evt);
            }
        });

        b_hyper1.setText("Memory DUMP");
        b_hyper1.setToolTipText("Si programas \"GOTO $\" la pictor se bloquear√° en esa instrucci√≥n. Puedes darle aqu√≠ y pulsar reset para ver la memoria de datos.");
        b_hyper1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_hyper1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(t_port, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(b_ports)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(b_hyper)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(b_hyper1, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(t_folder)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(b_folder)
                                        .addGap(18, 18, 18)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(t_depth, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(b_reload, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(b_dis))
                                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(b_start, javax.swing.GroupLayout.DEFAULT_SIZE, 210, Short.MAX_VALUE)
                                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(10, 10, 10))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 388, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 331, Short.MAX_VALUE)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel2, jLabel4});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jLabel7)
                        .addGap(22, 22, 22))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(t_folder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(t_depth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(b_folder)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(t_port, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(b_ports)
                        .addComponent(b_hyper)
                        .addComponent(b_hyper1))
                    .addComponent(b_reload))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE)
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(b_start, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(progressBar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(b_dis, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {b_folder, b_ports, jLabel2, jLabel3, jLabel4, t_depth, t_folder, t_port});

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {b_dis, b_start, progressBar});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void t_depthItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_t_depthItemStateChanged
        // TODO add your handling code here:

    }//GEN-LAST:event_t_depthItemStateChanged

    private void b_folderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_folderActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            if(selectedFile.isDirectory()){
                t_folder.setText(selectedFile.getAbsolutePath());
                UserSettings.configProps.setProperty("FilesFolder",  selectedFile.getAbsolutePath() );
                UserSettings.saveProperties();
                //proyect = selectedFile;
                b_reload.doClick();
            }else{
                t_folder.setText("Error. You must select a FOLDER.");
            }
        }
    }//GEN-LAST:event_b_folderActionPerformed

    private void b_portsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_portsActionPerformed
        // TODO add your handling code here:
        setNewPorts(yar.getPorts());
        if (t_port.getSelectedItem()==null) return;
        UserSettings.configProps.setProperty("SerialPort",  t_port.getSelectedItem().toString() );
        UserSettings.saveProperties();
                
    }//GEN-LAST:event_b_portsActionPerformed

    private void b_startActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_startActionPerformed
        // TODO add your handling code here:
         setBarConfig(StaticStrings.DEFBAR_FONT_COLOR,
                StaticStrings.DEFBAR_BOTCOLOR,StaticStrings.DEFBAR_TOPCOLOR,
                StaticStrings.DEFBAR_PROG_BOTCOLOR,StaticStrings.DEFBAR_PROG_TOPCOLOR,
                null);     
        //setBarConfig
        
        Boolean ok = false;
        disableComponents();
        b_dis.setEnabled(true);
        
        //port = (String) UserSettings.configProps.getProperty("SerialPort") ;
        int n = t_port.getSelectedIndex();
        if(n!= -1){
            port = t_port.getSelectedItem().toString();
            ArrayList<String> ports = yar.getPorts();
                for(String s : ports){
                    if(s.equals(port)) ok = true;
                }
        }
        if(port!=null)
            if(port.equals("") || port.equals(" ") || port == null) ok = false;
        
        
        
        int selectedn = table.getSelectedRow();
        if(selectedn==-1){
            enableComponents();
            progressBar.setString("VERIFICATION FAILED. CHECK SERIAL PORT AND SELECTED FILE.");
            return;
        }
        selectedn = table.convertRowIndexToModel( table.getSelectedRow() );
       
        if(selectedn != -1){
            //int n = table.convertRowIndexToModel(selectedn)
            selected = new File( proyect+((String) model.getValueAt(selectedn, 0))   );
            
            if( !selected.isFile() ) ok = false;
        }else{
            ok = false;
        }
        
        System.out.println(selected.getPath());
        
        if (ok) {
            Thread t = new Thread() {
                @Override
                public void run() {
                    yar.connect(selected);
                }
            };
            t.start();
            
            //progressBar.setString("");
        }
        else{
            enableComponents();
            progressBar.setString("VERIFICATION FAILED. CHECK SERIAL PORT AND SELECTED FILE.");
        }
            //yar.connect( new File( (String) model.getValueAt(table.getSelectedRow(), 0)   )        );
        
        
        
    }//GEN-LAST:event_b_startActionPerformed

    private void b_portsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_b_portsItemStateChanged
        // TODO add your handling code here:
        UserSettings.configProps.setProperty("SerialPort",  t_port.getSelectedItem().toString() );
        UserSettings.saveProperties();
    }//GEN-LAST:event_b_portsItemStateChanged

    private void b_reloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_reloadActionPerformed
        // TODO add your handling code here:
        while(  model.getRowCount()!=0  )
            model.removeRow(0);
                
        Date date;
        DateFormat format = new SimpleDateFormat("yyyy/MM/dd  HH:mm:ss");
        format.setTimeZone(TimeZone.getDefault());
        
        File f = new File((String) UserSettings.configProps.getProperty("FilesFolder"));
        if(!f.isDirectory()) return;
        
        FilesTools ft = new FilesTools(f, Integer.parseInt( UserSettings.configProps.getProperty("FilesDepth")) );
        ArrayList<File> files = ft.returnFiles();
        String[] rowData;
        String path;
        this.proyect = t_folder.getText();
        for(File d : files){
            date = new Date(d.lastModified());
            rowData = new String[3];
            path = d.getAbsolutePath();
            rowData[0]=path.replaceAll(Pattern.quote( proyect ), "");
            rowData[1]=String.format("%.4g%n", ((float) d.length())/(1024)  )+" KB";
            rowData[2]=format.format(date);
            model.addRow(rowData);
        }
        if(table.getRowCount()>0) table.setRowSelectionInterval(0, 0);

    }//GEN-LAST:event_b_reloadActionPerformed

    private void b_disActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_disActionPerformed
        // TODO add your handling code here:
        yar.disconnect();
        //b_dis.setEnabled(portinit);
        enableComponents();
        
        setBarConfig(StaticStrings.DEFBAR_FONT_COLOR,
                StaticStrings.DEFBAR_BOTCOLOR,StaticStrings.DEFBAR_TOPCOLOR,
                StaticStrings.DEFBAR_PROG_BOTCOLOR,StaticStrings.DEFBAR_PROG_TOPCOLOR,
                "READY. SELECT A FILE AND PRESS START");      
    }//GEN-LAST:event_b_disActionPerformed

    private void t_portItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_t_portItemStateChanged
        // TODO add your handling code here:

    }//GEN-LAST:event_t_portItemStateChanged

    private void s_bitrateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_s_bitrateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_s_bitrateActionPerformed

    private void sound_checkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sound_checkActionPerformed
        // TODO add your handling code here:
        if(sound_check.isSelected()){
            UserSettings.configProps.setProperty("Sound",  "true" );
        }else
            UserSettings.configProps.setProperty("Sound",  "false" );
        UserSettings.saveProperties();
    }//GEN-LAST:event_sound_checkActionPerformed

    private void t_portActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_t_portActionPerformed
        // TODO add your handling code here:
        if(!portinit) return;
        int n = t_port.getSelectedIndex();
        if ( n == -1 )
            return;
        //System.out.println( t_port.getSelectedItem().toString() );
        UserSettings.configProps.setProperty("SerialPort",  t_port.getSelectedItem().toString() );
        UserSettings.saveProperties();
        System.out.println("Action");
    }//GEN-LAST:event_t_portActionPerformed

    private void t_depthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_t_depthActionPerformed
        // TODO add your handling code here:
        UserSettings.configProps.setProperty("FilesDepth",  t_depth.getSelectedItem().toString() );
        UserSettings.saveProperties();
    }//GEN-LAST:event_t_depthActionPerformed

    private void jLabel5MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel5MouseReleased
        // TODO add your handling code here:
        //SoundTools.playPirate();
        if(isSound()) SoundTools.playPirate();
    }//GEN-LAST:event_jLabel5MouseReleased

    private void b_hyperActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_hyperActionPerformed
        // TODO add your handling code here:
        if(ter == null) ter = new YarPicTerminal() ;
        ter.setVisible(true);
    }//GEN-LAST:event_b_hyperActionPerformed

    private void b_hyper1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_hyper1ActionPerformed
        // TODO add your handling code here:
        setBarConfig(StaticStrings.DEFBAR_FONT_COLOR,
                StaticStrings.DEFBAR_BOTCOLOR,StaticStrings.DEFBAR_TOPCOLOR,
                StaticStrings.DEFBAR_PROG_BOTCOLOR,StaticStrings.DEFBAR_PROG_TOPCOLOR,
                null);     
        //setBarConfig
        
        Boolean ok = false;
        disableComponents();
        b_dis.setEnabled(true);
        
        //port = (String) UserSettings.configProps.getProperty("SerialPort") ;
        int n = t_port.getSelectedIndex();
        if(n!= -1){
            port = t_port.getSelectedItem().toString();
            ArrayList<String> ports = yar.getPorts();
                for(String s : ports){
                    if(s.equals(port)) ok = true;
                }
        }
        if(port!=null)
            if(port.equals("") || port.equals(" ") || port == null) ok = false;
        
       
               
        if (ok) {
            Thread t = new Thread() {
                @Override
                public void run() {
                    yardump.connect();

                }
            };
            t.start();
            
            //progressBar.setString("");
        }
        else{
            enableComponents();
            progressBar.setString("VERIFICATION FAILED. CHECK SERIAL PORT.");
        }
        
        
    }//GEN-LAST:event_b_hyper1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(YarHarPictor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(YarHarPictor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(YarHarPictor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(YarHarPictor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                WebLookAndFeel.install ();
                //CoreManagers.initialize ();
                WebLookAndFeel.initializeManagers ();
                new YarHarPictor().setVisible(true);
            }
        });
    }
    
    private void startAPP(){
        File configFolder = new File("./config");
        if(!configFolder.exists()) configFolder.mkdir();
        
        String[] columnNames = new String[]{ "HEX File" , "Size" , "Last Modified" };
        model = new TableModel(columnNames,0);
    }

    private void afterAPP(){
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment( JLabel.CENTER );
        //DefaultTableCellRenderer render2 = new DefaultTableCellRenderer();
        //render2.setHorizontalAlignment(SwingConstants.TRAILING);
        LeftDotRenderer leftDot = new LeftDotRenderer();
        
        table.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
        table.getColumnModel().getColumn(1).setMaxWidth(100);
        table.getColumnModel().getColumn(1).setMinWidth(100);
        table.getColumnModel().getColumn(2).setMaxWidth(170);
        table.getColumnModel().getColumn(2).setMinWidth(170);
        table.getColumnModel().getColumn(1).setCellRenderer( centerRenderer );
        table.getColumnModel().getColumn(2).setCellRenderer( centerRenderer );
        table.getColumnModel().getColumn(0).setCellRenderer( leftDot );


        /* Load Settings */
        UserSettings.loadProperties();
        loadSettings();

        
        setBarConfig(null,null,null,null,null,"READY. SELECT A FILE AND PRESS START");
        //setBarColor(Color.black);
        //progressBar.setString("READY. SELECT A FILE AND PRESS START");
        progressBar.setValue(100);
        progressBar.setStringPainted(true);
        
        
        
        DefaultCaret caret = (DefaultCaret)t_serial.getCaret();
        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
        
        
        System.out.println((( WebProgressBar) progressBar).getForeground());
        System.out.println((( WebProgressBar) progressBar).getBgBottom());
        System.out.println((( WebProgressBar) progressBar).getBgTop());
        System.out.println((( WebProgressBar) progressBar).getProgressBottomColor());
        System.out.println((( WebProgressBar) progressBar).getProgressTopColor());
        //setBarConfig(Color.BLACK,null,null,null,null,null);
        
        b_reload.doClick();
        //b_reload.doClick();
        
        table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        table.setAutoCreateRowSorter(true);
        
        TableRowSorter<javax.swing.table.TableModel> sorter = new TableRowSorter<>(table.getModel());
        table.setRowSorter(sorter);
        List<RowSorter.SortKey> sortKeys = new ArrayList<>();

        
        int columnIndexToSort = 2;
        sortKeys.add(new RowSorter.SortKey(columnIndexToSort, SortOrder.DESCENDING));


        
        if(table.getRowCount()>0) {
            sorter.setSortKeys(sortKeys);
            sorter.sort();
            table.setRowSelectionInterval(0, 0);
        }
        
        //setBarValue((float)10.5,(float)22.4);
        
        
        this.addWindowListener(new WindowAdapter(){
                @Override
                public void windowClosing(WindowEvent e){
                    if(!b_start.isEnabled()){
                        if(war==null) war = new warning();
                        war.setVisible(true);
                    }
                    else
                        System.exit(0);
                }
        });
    }
    
    private void run(){

    }
    
    private void loadSettings(){
        
        t_folder.setText( UserSettings.configProps.getProperty("FilesFolder") );
        t_depth.setSelectedItem( UserSettings.configProps.getProperty("FilesDepth"));
        t_port.addItem(  (String) UserSettings.configProps.getProperty("SerialPort") );
        setNewPorts(yar.getPorts());
        t_port.setSelectedItem( (String) UserSettings.configProps.getProperty("SerialPort") );
        sound_check.setSelected( Boolean.parseBoolean( (String) UserSettings.configProps.getProperty("Sound")  ) );
        portinit = true;
        
        s_bitrate.setText( (String) UserSettings.configProps.getProperty("BaudRate") );
        s_databits.setText( (String) UserSettings.configProps.getProperty("dataBits") );
        s_stopbit.setText( (String) UserSettings.configProps.getProperty("StopBits") );
        s_paritybit.setText( (String) UserSettings.configProps.getProperty("Parity") );
        
        boolean dis = ( Boolean.parseBoolean( (String) UserSettings.configProps.getProperty("Disclaimer")  ) );
        if(!dis) {
            this.setEnabled(false);
            new Disclaimer(this).setVisible(true);
        }
    }
    
    public boolean isSound(){
        return Boolean.parseBoolean( (String) UserSettings.configProps.getProperty("Sound")  );
    }
    
    public void setSerialOutput(String s){
        //t_serial.append(s);
        t_serial.setText(s);
    }
    
    public void setNewPorts(ArrayList<String> a){
        t_port.removeAllItems();
        for(String s : a){
            t_port.addItem((String) s);
        }
    }
    
//    public void setBarColor(Color t){
//       (( WebProgressBar) progressBar).setProgressTopColor(t);
//    }
//    
//    public void setBarColor(Color t, Color b){
//        (( WebProgressBar) progressBar).setProgressTopColor(t);
//        //(( WebProgressBar) progressBar).setProgressBottomColor(b);
//        //(( WebProgressBar) progressBar).setProgressBottomColor(Color.CYAN);
//        
//    }
//    public void setBarFontColor(Color b){
//        (( WebProgressBar) progressBar).setForeground(b);
//    }
//
//    
//    
//    public void setBarText(String s){
//        progressBar.setString(s);
//    }
    
    public void setBarValue(float n, float max){
        float rr = (n / max) * 100;
        int r = (int) rr;
        //System.out.println(rr+" "+r);
        progressBar.setValue(r);
        
//        if(r==100){
//            (( WebProgressBar) progressBar).setBgTop(Color.RED);
//            (( WebProgressBar) progressBar).setBgBottom(Color.white);
//            (( WebProgressBar) progressBar).setForeground(new Color(64,64,64));
//        }else{
//            (( WebProgressBar) progressBar).setBgBottom(Color.black);
//            (( WebProgressBar) progressBar).setBgTop(Color.RED);
//            (( WebProgressBar) progressBar).setForeground(Color.white);
//        }
    }
    
    public void setBarConfigDefault(){
        
    }
    
    public void setBarConfig(Color font, Color bot, Color top, Color progbot, Color progtop, String text){
        if(font!=null)      (( WebProgressBar) progressBar).setForeground(font);
        if(bot!=null)       (( WebProgressBar) progressBar).setBgBottom(bot);
        if(top!=null)       (( WebProgressBar) progressBar).setBgTop(top);
        if(progbot!=null)   (( WebProgressBar) progressBar).setProgressBottomColor(progbot);
        if(progtop!=null)   (( WebProgressBar) progressBar).setProgressTopColor(progtop);
        if(text!=null)      (( WebProgressBar) progressBar).setString(text);
    }
    
    public void disableComponents(){
        b_start.setEnabled(false);
        b_ports.setEnabled(false);
        t_port.setEnabled(false);
    }
    
    public void enableComponents(){
        b_start.setEnabled(true);
        b_ports.setEnabled(true);
        t_port.setEnabled(true);
        b_dis.setEnabled(false);
    }
    
    public void setDisconnect(boolean b){
        b_dis.setEnabled(b);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton b_dis;
    private javax.swing.JButton b_folder;
    private javax.swing.JButton b_hyper;
    private javax.swing.JButton b_hyper1;
    private javax.swing.JButton b_ports;
    private javax.swing.JButton b_reload;
    private javax.swing.JButton b_start;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JTextField s_bitrate;
    private javax.swing.JTextField s_databits;
    private javax.swing.JTextField s_paritybit;
    private javax.swing.JTextField s_stopbit;
    private javax.swing.JCheckBox sound_check;
    private javax.swing.JComboBox t_depth;
    private javax.swing.JTextField t_folder;
    private javax.swing.JComboBox t_port;
    private javax.swing.JTextArea t_serial;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
}
